{
  // Place your CP_Code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "template": {
    "prefix": "tmp",
    "body": [
      "/*---------------Go Code GO---------------*/",
      "",
      "#include \"bits/stdc++.h\"",
      "#include \"ext/pb_ds/assoc_container.hpp\"",
      "#include \"ext/pb_ds/tree_policy.hpp\"",
      "#ifdef BUG",
      "#include \"bits/error.h\"",
      "#else",
      "#define debug(x...)",
      "#define endl '\\n'",
      "#endif",
      "",
      "#pragma GCC target(\"sse4.2\")",
      "#pragma GCC target(\"avx2\")",
      "#pragma GCC optimization(\"O3\")",
      "#pragma GCC optimization(\"unroll-loops\")",
      "",
      "using namespace std;",
      "using namespace __gnu_pbds;",
      "template <typename T>",
      "using Order_Set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
      "//(order) Set.order_of_key(); (pointer) Set.find_by_order();",
      "",
      "class Solution",
      "{",
      "public:",
      "    void run()",
      "    {",
      "        $0",
      "    }",
      "};",
      "",
      "int main()",
      "{",
      "#ifdef BUG",
      "    freopen(\"in.txt\", \"r\", stdin);",
      "#endif",
      "    ios_base::sync_with_stdio(false);",
      "    cin.tie(NULL);",
      "",
      "    int test = 1;",
      "    cin >> test;",
      "    while (test--)",
      "    {",
      "        Solution runner;",
      "        runner.run();",
      "    }",
      "    return 0;",
      "}",
      ""
    ],
    "description": "template"
  },
  "BigMod": {
    "prefix": "BigMod",
    "body": [
      "long long BigMod(unsigned long long x, unsigned long long y, long long MOD)",
      "{",
      "long long res = 1;",
      "x = x % MOD;",
      "while (y > 0)",
      "{",
      "if (y & 1) res = (res*x) % MOD;",
      "y = y>>1;",
      "x = (x*x) % MOD;",
      "}",
      "return res;",
      "}",
      "long long Inverse_Modulo(long long a,long long MOD)",
      "{",
      "return BigMod(a,MOD-2,MOD);",
      "}"
    ],
    "description": "BigMod"
  }
  
}
